{"version":3,"sources":["languages/hy.js"],"names":["define","exports","module","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","hljs","SYMBOL_RE","SYMBOL","begin","relevance","NUMBER","className","STRING","inherit","QUOTE_STRING_MODE","illegal","COMMENT","LITERAL","COLLECTION","end","HINT","HINT_COL","KEY","LIST","BODY","endsWithParent","NAME","keywords","builtin-name","lexemes","starts","DEFAULT_CONTAINS","contains","aliases"],"mappings":";;;;;;;AAAAA,UAAW,WACP,aACA,IAAIC,WACAC,KAgGJ,SAASC,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAlGAJ,QAAQ,gBAAiB,SAAUS,GAC/B,IAEIC,EAAY,wDAOZC,GACAC,MAAOF,EACPG,UAAW,GAEXC,GACAC,UAAW,SACXH,MAZmB,sBAanBC,UAAW,GAEXG,EAASP,EAAKQ,QAAQR,EAAKS,mBAAqBC,QAAS,OACzDC,EAAUX,EAAKW,QAAQ,IAAK,KAAOP,UAAW,IAC9CQ,GACAN,UAAW,UACXH,MAAO,mCAEPU,GACAV,MAAO,WACPW,IAAK,YAELC,GACAT,UAAW,UACXH,MAAO,MAAQF,GAEfe,EAAWhB,EAAKW,QAAQ,SAAU,OAClCM,GACAX,UAAW,SACXH,MAAO,WAAaF,GAEpBiB,GACAf,MAAO,MACPW,IAAK,OAELK,GACAC,gBAAgB,EAChBhB,UAAW,GAEXiB,GACAC,UA9CaC,eAAgB,okEA+C7BC,QAASvB,EACTK,UAAW,OACXH,MAAOF,EACPwB,OAAQN,GAERO,GACAR,EACAX,EACAQ,EACAC,EACAL,EACAM,EACAJ,EACAR,EACAO,EACAV,GASJ,OAPAgB,EAAKS,UACD3B,EAAKW,QAAQ,UAAW,IACxBU,EACAF,GAEJA,EAAKQ,SAAWD,EAChBb,EAAWc,SAAWD,GAElBE,SAAU,UACVlB,QAAS,KACTiB,WArEArB,UAAW,OACXH,MAAO,MACPW,IAAK,KAqEDI,EACAX,EACAQ,EACAC,EACAL,EACAM,EACAJ,EACAR,EACAO,MAaRlB,EAAkBD,GACXA,EACFC,EAAkBF,SAChBA,aADN","file":"../../languages/hy.js","sourcesContent":["define([], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    define(['../highlight'], function (hljs) {\n        var keywords = { 'builtin-name': '!= % %= & &= * ** **= *= *map ' + '+ += , --build-class-- --import-- -= . / // //= ' + '/= < << <<= <= = > >= >> >>= ' + '@ @= ^ ^= abs accumulate all and any ap-compose ' + 'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe ' + 'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast ' + 'callable calling-module-name car case cdr chain chr coll? combinations compile ' + 'compress cond cons cons? continue count curry cut cycle dec ' + 'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn ' + 'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir ' + 'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? ' + 'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first ' + 'flatten float? fn fnc fnr for for* format fraction genexpr ' + 'gensym get getattr global globals group-by hasattr hash hex id ' + 'identity if if* if-not if-python2 import in inc input instance? ' + 'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even ' + 'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none ' + 'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass ' + 'iter iterable? iterate iterator? keyword keyword? lambda last len let ' + 'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all ' + 'map max merge-with method-decorator min multi-decorator multicombinations name neg? next ' + 'none? nonlocal not not-in not? nth numeric? oct odd? open ' + 'or ord partition permutations pos? post-route postwalk pow prewalk print ' + 'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str ' + 'recursive-replace reduce remove repeat repeatedly repr require rest round route ' + 'route-with-methods rwm second seq set-comp setattr setv some sorted string ' + 'string? sum switch symbol? take take-nth take-while tee try unless ' + 'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms ' + 'xi xor yield yield-from zero? zip zip-longest | |= ~' };\n        var SYMBOLSTART = \"a-zA-Z_\\\\-!.?+*=<>&#'\";\n        var SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';\n        var SIMPLE_NUMBER_RE = '[-+]?\\\\d+(\\\\.\\\\d+)?';\n        var SHEBANG = {\n            className: 'meta',\n            begin: '^#!',\n            end: '$'\n        };\n        var SYMBOL = {\n            begin: SYMBOL_RE,\n            relevance: 0\n        };\n        var NUMBER = {\n            className: 'number',\n            begin: SIMPLE_NUMBER_RE,\n            relevance: 0\n        };\n        var STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });\n        var COMMENT = hljs.COMMENT(';', '$', { relevance: 0 });\n        var LITERAL = {\n            className: 'literal',\n            begin: /\\b([Tt]rue|[Ff]alse|nil|None)\\b/\n        };\n        var COLLECTION = {\n            begin: '[\\\\[\\\\{]',\n            end: '[\\\\]\\\\}]'\n        };\n        var HINT = {\n            className: 'comment',\n            begin: '\\\\^' + SYMBOL_RE\n        };\n        var HINT_COL = hljs.COMMENT('\\\\^\\\\{', '\\\\}');\n        var KEY = {\n            className: 'symbol',\n            begin: '[:]{1,2}' + SYMBOL_RE\n        };\n        var LIST = {\n            begin: '\\\\(',\n            end: '\\\\)'\n        };\n        var BODY = {\n            endsWithParent: true,\n            relevance: 0\n        };\n        var NAME = {\n            keywords: keywords,\n            lexemes: SYMBOL_RE,\n            className: 'name',\n            begin: SYMBOL_RE,\n            starts: BODY\n        };\n        var DEFAULT_CONTAINS = [\n            LIST,\n            STRING,\n            HINT,\n            HINT_COL,\n            COMMENT,\n            KEY,\n            COLLECTION,\n            NUMBER,\n            LITERAL,\n            SYMBOL\n        ];\n        LIST.contains = [\n            hljs.COMMENT('comment', ''),\n            NAME,\n            BODY\n        ];\n        BODY.contains = DEFAULT_CONTAINS;\n        COLLECTION.contains = DEFAULT_CONTAINS;\n        return {\n            aliases: ['hylang'],\n            illegal: /\\S/,\n            contains: [\n                SHEBANG,\n                LIST,\n                STRING,\n                HINT,\n                HINT_COL,\n                COMMENT,\n                KEY,\n                COLLECTION,\n                NUMBER,\n                LITERAL\n            ]\n        };\n    });\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}