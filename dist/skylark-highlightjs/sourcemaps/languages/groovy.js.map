{"version":3,"sources":["languages/groovy.js"],"names":["define","hljs","keywords","literal","keyword","contains","COMMENT","relevance","begin","className","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","end","APOS_STRING_MODE","BACKSLASH_ESCAPE","QUOTE_STRING_MODE","illegal","BINARY_NUMBER_MODE","beginKeywords","UNDERSCORE_TITLE_MODE","C_NUMBER_MODE"],"mappings":";;;;;;;AAOAA,QACE,gBACA,SAASC,GACP,OACIC,UACIC,QAAU,kBACVC,QACA,wUASJC,UACIJ,EAAKK,QACD,UACA,QAEIC,UAAY,EACZF,WAGMG,MAAO,OAAQD,UAAW,IAG1BE,UAAY,SACZD,MAAQ,iBAKtBP,EAAKS,oBACLT,EAAKU,sBAEDF,UAAW,SACXD,MAAO,MAAOI,IAAK,QAGnBH,UAAW,SACXD,MAAO,MAAOI,IAAK,QAGnBH,UAAW,SACXD,MAAO,OAAQI,IAAK,OACpBL,UAAW,IAEfN,EAAKY,kBAEDJ,UAAW,SACXD,MAAO,iBACPH,UACIJ,EAAKa,mBAGbb,EAAKc,mBAEDN,UAAW,OACXD,MAAO,kBAAmBI,IAAK,IAC/BI,QAAS,MAEbf,EAAKgB,oBAEDR,UAAW,QACXS,cAAe,6BAA8BN,IAAK,IAClDI,QAAS,IACTX,WACKa,cAAe,sBAChBjB,EAAKkB,wBAGblB,EAAKmB,eAEDX,UAAW,OAAQD,MAAO,eAI1BC,UAAW,SAAUD,MAAO,8BAK5BA,MAAO,KAAMI,IAAK,OAIlBH,UAAW,SAAUD,MAAO,uBAC5BD,UAAW,IAGnBS,QAAS","file":"../../languages/groovy.js","sourcesContent":["/*\n Language: Groovy\n Author: Guillaume Laforge <glaforge@gmail.com>\n Website: http://glaforge.appspot.com\n Description: Groovy programming language implementation inspired from Vsevolod's Java mode\n */\n\ndefine([\n  \"../highlight\"\n],function(hljs){\n    return {\n        keywords: {\n            literal : 'true false null',\n            keyword:\n            'byte short char int long boolean float double void ' +\n            // groovy specific keywords\n            'def as in assert trait ' +\n            // common keywords with Java\n            'super this abstract static volatile transient public private protected synchronized final ' +\n            'class interface enum if else for while switch case break default continue ' +\n            'throw throws try catch finally implements extends new import package return instanceof'\n        },\n\n        contains: [\n            hljs.COMMENT(\n                '/\\\\*\\\\*',\n                '\\\\*/',\n                {\n                    relevance : 0,\n                    contains : [\n                      {\n                          // eat up @'s in emails to prevent them to be recognized as doctags\n                          begin: /\\w+@/, relevance: 0\n                      },\n                      {\n                          className : 'doctag',\n                          begin : '@[A-Za-z]+'\n                      }\n                    ]\n                }\n            ),\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            {\n                className: 'string',\n                begin: '\"\"\"', end: '\"\"\"'\n            },\n            {\n                className: 'string',\n                begin: \"'''\", end: \"'''\"\n            },\n            {\n                className: 'string',\n                begin: \"\\\\$/\", end: \"/\\\\$\",\n                relevance: 10\n            },\n            hljs.APOS_STRING_MODE,\n            {\n                className: 'regexp',\n                begin: /~?\\/[^\\/\\n]+\\//,\n                contains: [\n                    hljs.BACKSLASH_ESCAPE\n                ]\n            },\n            hljs.QUOTE_STRING_MODE,\n            {\n                className: 'meta',\n                begin: \"^#!/usr/bin/env\", end: '$',\n                illegal: '\\n'\n            },\n            hljs.BINARY_NUMBER_MODE,\n            {\n                className: 'class',\n                beginKeywords: 'class interface trait enum', end: '{',\n                illegal: ':',\n                contains: [\n                    {beginKeywords: 'extends implements'},\n                    hljs.UNDERSCORE_TITLE_MODE\n                ]\n            },\n            hljs.C_NUMBER_MODE,\n            {\n                className: 'meta', begin: '@[A-Za-z]+'\n            },\n            {\n                // highlight map keys and named parameters as strings\n                className: 'string', begin: /[^\\?]{0}[A-Za-z0-9_$]+ *:/\n            },\n            {\n                // catch middle element of the ternary operator\n                // to avoid highlight it as a label, named parameter, or map key\n                begin: /\\?/, end: /\\:/\n            },\n            {\n                // highlight labeled statements\n                className: 'symbol', begin: '^\\\\s*[A-Za-z0-9_$]+:',\n                relevance: 0\n            }\n        ],\n        illegal: /#|<\\//\n    }\n});\n"]}