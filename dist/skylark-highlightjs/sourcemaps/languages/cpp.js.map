{"version":3,"sources":["languages/cpp.js"],"names":["define","exports","module","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","hljs","CPP_PRIMITIVE_TYPES","className","begin","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","NUMBERS","relevance","PREPROCESSOR","keywords","meta-keyword","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","FUNCTION_TITLE","IDENT_RE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","aliases","concat","beginKeywords","returnBegin","excludeEnd","TITLE_MODE","preprocessor","strings"],"mappings":";;;;;;;AAAAA,UAAW,WACP,aACA,IAAIC,KACAC,KAgMJ,SAASC,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAlMAJ,QAAQ,gBAAiB,SAAUS,GAC/B,IAAIC,GACAC,UAAW,UACXC,MAAO,sBAEPC,GACAF,UAAW,SACXG,WAEQF,MAAO,cACPG,IAAK,IACLC,QAAS,MACTC,UAAWR,EAAKS,oBAElBN,MAAO,oDAELA,MAAO,UACPG,IAAK,IACLC,QAAS,OAIjBG,GACAR,UAAW,SACXG,WACMF,MAAO,kBACPA,MAAO,oEACPA,MAAO,wFAEbQ,UAAW,GAEXC,GACAV,UAAW,OACXC,MAAO,eACPG,IAAK,IACLO,UAAYC,eAAgB,kFAC5BN,WAEQL,MAAO,OACPQ,UAAW,GAEfX,EAAKe,QAAQX,GAAWF,UAAW,iBAE/BA,UAAW,cACXC,MAAO,YACPG,IAAK,IACLC,QAAS,OAEbP,EAAKgB,oBACLhB,EAAKiB,uBAGTC,EAAiBlB,EAAKmB,SAAW,UACjCC,GACAC,QAAS,+rBACTC,SAAU,4vBACVC,QAAS,2BAETC,GACAvB,EACAD,EAAKgB,oBACLhB,EAAKiB,qBACLP,EACAN,GAEJ,OACIqB,SACI,IACA,KACA,IACA,MACA,MACA,OAEJZ,SAAUO,EACVb,QAAS,KACTC,SAAUgB,EAAoBE,QAC1Bd,GAEIT,MAAO,mJACPG,IAAK,IACLO,SAAUO,EACVZ,UACI,OACAP,KAIJE,MAAOH,EAAKmB,SAAW,KACvBN,SAAUO,IAGVf,WAEQF,MAAO,IACPG,IAAK,MAGLH,MAAO,KACPG,IAAK,OAGLqB,cAAe,wBACfrB,IAAK,MAGbO,SAAUO,EACVZ,SAAUgB,EAAoBE,SACtBvB,MAAO,KACPG,IAAK,KACLO,SAAUO,EACVZ,SAAUgB,EAAoBE,QAAQ,SACtCf,UAAW,KAEnBA,UAAW,IAGXT,UAAW,WACXC,MAAO,IAAMH,EAAKmB,SAAW,eAAiBD,EAC9CU,aAAa,EACbtB,IAAK,QACLuB,YAAY,EACZhB,SAAUO,EACVb,QAAS,aACTC,WAEQL,MAAOe,EACPU,aAAa,EACbpB,UAAWR,EAAK8B,YAChBnB,UAAW,IAGXT,UAAW,SACXC,MAAO,KACPG,IAAK,KACLO,SAAUO,EACVT,UAAW,EACXH,UACIR,EAAKgB,oBACLhB,EAAKiB,qBACLb,EACAM,EACAT,GAEIE,MAAO,KACPG,IAAK,KACLO,SAAUO,EACVT,UAAW,EACXH,UACI,OACAR,EAAKgB,oBACLhB,EAAKiB,qBACLb,EACAM,EACAT,MAKhBD,EAAKgB,oBACLhB,EAAKiB,qBACLL,KAIJV,UAAW,QACXyB,cAAe,eACfrB,IAAK,QACLE,WAEQL,MAAO,IACPG,IAAK,IACLE,UAAW,SAEfR,EAAK8B,eAIjBtC,SACIuC,aAAcnB,EACdoB,QAAS5B,EACTS,SAAUO,MAalB1B,EAAkBD,GACXA,EACFC,EAAkBF,GAChBA,OADN","file":"../../languages/cpp.js","sourcesContent":["define([], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    define(['../highlight'], function (hljs) {\n        var CPP_PRIMITIVE_TYPES = {\n            className: 'keyword',\n            begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n        };\n        var STRINGS = {\n            className: 'string',\n            variants: [\n                {\n                    begin: '(u8?|U|L)?\"',\n                    end: '\"',\n                    illegal: '\\\\n',\n                    contains: [hljs.BACKSLASH_ESCAPE]\n                },\n                { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ },\n                {\n                    begin: \"'\\\\\\\\?.\",\n                    end: \"'\",\n                    illegal: '.'\n                }\n            ]\n        };\n        var NUMBERS = {\n            className: 'number',\n            variants: [\n                { begin: \"\\\\b(0b[01']+)\" },\n                { begin: \"(-?)\\\\b([\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)(u|U|l|L|ul|UL|f|F|b|B)\" },\n                { begin: \"(-?)(\\\\b0[xX][a-fA-F0-9']+|(\\\\b[\\\\d']+(\\\\.[\\\\d']*)?|\\\\.[\\\\d']+)([eE][-+]?[\\\\d']+)?)\" }\n            ],\n            relevance: 0\n        };\n        var PREPROCESSOR = {\n            className: 'meta',\n            begin: /#\\s*[a-z]+\\b/,\n            end: /$/,\n            keywords: { 'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma ifdef ifndef include' },\n            contains: [\n                {\n                    begin: /\\\\\\n/,\n                    relevance: 0\n                },\n                hljs.inherit(STRINGS, { className: 'meta-string' }),\n                {\n                    className: 'meta-string',\n                    begin: /<[^\\n>]*>/,\n                    end: /$/,\n                    illegal: '\\\\n'\n                },\n                hljs.C_LINE_COMMENT_MODE,\n                hljs.C_BLOCK_COMMENT_MODE\n            ]\n        };\n        var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n        var CPP_KEYWORDS = {\n            keyword: 'int float while private char catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid ' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignof constexpr decltype ' + 'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and or not',\n            built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n            literal: 'true false nullptr NULL'\n        };\n        var EXPRESSION_CONTAINS = [\n            CPP_PRIMITIVE_TYPES,\n            hljs.C_LINE_COMMENT_MODE,\n            hljs.C_BLOCK_COMMENT_MODE,\n            NUMBERS,\n            STRINGS\n        ];\n        return {\n            aliases: [\n                'c',\n                'cc',\n                'h',\n                'c++',\n                'h++',\n                'hpp'\n            ],\n            keywords: CPP_KEYWORDS,\n            illegal: '</',\n            contains: EXPRESSION_CONTAINS.concat([\n                PREPROCESSOR,\n                {\n                    begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n                    end: '>',\n                    keywords: CPP_KEYWORDS,\n                    contains: [\n                        'self',\n                        CPP_PRIMITIVE_TYPES\n                    ]\n                },\n                {\n                    begin: hljs.IDENT_RE + '::',\n                    keywords: CPP_KEYWORDS\n                },\n                {\n                    variants: [\n                        {\n                            begin: /=/,\n                            end: /;/\n                        },\n                        {\n                            begin: /\\(/,\n                            end: /\\)/\n                        },\n                        {\n                            beginKeywords: 'new throw return else',\n                            end: /;/\n                        }\n                    ],\n                    keywords: CPP_KEYWORDS,\n                    contains: EXPRESSION_CONTAINS.concat([{\n                            begin: /\\(/,\n                            end: /\\)/,\n                            keywords: CPP_KEYWORDS,\n                            contains: EXPRESSION_CONTAINS.concat(['self']),\n                            relevance: 0\n                        }]),\n                    relevance: 0\n                },\n                {\n                    className: 'function',\n                    begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n                    returnBegin: true,\n                    end: /[{;=]/,\n                    excludeEnd: true,\n                    keywords: CPP_KEYWORDS,\n                    illegal: /[^\\w\\s\\*&]/,\n                    contains: [\n                        {\n                            begin: FUNCTION_TITLE,\n                            returnBegin: true,\n                            contains: [hljs.TITLE_MODE],\n                            relevance: 0\n                        },\n                        {\n                            className: 'params',\n                            begin: /\\(/,\n                            end: /\\)/,\n                            keywords: CPP_KEYWORDS,\n                            relevance: 0,\n                            contains: [\n                                hljs.C_LINE_COMMENT_MODE,\n                                hljs.C_BLOCK_COMMENT_MODE,\n                                STRINGS,\n                                NUMBERS,\n                                CPP_PRIMITIVE_TYPES,\n                                {\n                                    begin: /\\(/,\n                                    end: /\\)/,\n                                    keywords: CPP_KEYWORDS,\n                                    relevance: 0,\n                                    contains: [\n                                        'self',\n                                        hljs.C_LINE_COMMENT_MODE,\n                                        hljs.C_BLOCK_COMMENT_MODE,\n                                        STRINGS,\n                                        NUMBERS,\n                                        CPP_PRIMITIVE_TYPES\n                                    ]\n                                }\n                            ]\n                        },\n                        hljs.C_LINE_COMMENT_MODE,\n                        hljs.C_BLOCK_COMMENT_MODE,\n                        PREPROCESSOR\n                    ]\n                },\n                {\n                    className: 'class',\n                    beginKeywords: 'class struct',\n                    end: /[{;:]/,\n                    contains: [\n                        {\n                            begin: /</,\n                            end: />/,\n                            contains: ['self']\n                        },\n                        hljs.TITLE_MODE\n                    ]\n                }\n            ]),\n            exports: {\n                preprocessor: PREPROCESSOR,\n                strings: STRINGS,\n                keywords: CPP_KEYWORDS\n            }\n        };\n    });\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}