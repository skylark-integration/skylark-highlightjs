{"version":3,"sources":["languages/scheme.js"],"names":["define","exports","module","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","hljs","SCHEME_IDENT_RE","LITERAL","className","begin","NUMBER","variants","relevance","SCHEME_SIMPLE_NUMBER_RE","STRING","QUOTE_STRING_MODE","COMMENT_MODES","COMMENT","IDENT","QUOTED_IDENT","BODY","endsWithParent","QUOTED_LIST","contains","end","NAME","lexemes","keywords","builtin-name","LIST","returnBegin","endsParent","concat","illegal"],"mappings":";;;;;;;AAAAA,UAAW,WACP,aACA,IAAIC,KACAC,KAuIJ,SAASC,EAAkBC,GACvB,MAAqB,iBAAPA,GAAmBC,MAAMC,QAAQF,KAPnD,SAAyBA,GACrB,IAAIG,EACJ,IAAKA,KAAQH,EACT,OAAO,EACX,OAAO,EAGiDI,CAAgBJ,GAE5E,OAzIAJ,QAAQ,gBAAiB,SAAUS,GAC/B,IAAIC,EAAkB,wCASlBC,GACAC,UAAW,UACXC,MAAO,eAAiBH,EAAkB,YAE1CI,GACAF,UAAW,SACXG,WAEQF,MAhBkB,4BAiBlBG,UAAW,IAGXH,MAnBmBI,4DAoBnBD,UAAW,IAEbH,MAAO,uBACPA,MAAO,uBACPA,MAAO,8BAGbK,EAAST,EAAKU,kBAMdC,GACAX,EAAKY,QAAQ,IAAK,KAAOL,UAAW,IACpCP,EAAKY,QAAQ,OAAQ,SAErBC,GACAT,MAAOH,EACPM,UAAW,GAEXO,GACAX,UAAW,SACXC,MAAO,IAAMH,GAEbc,GACAC,gBAAgB,EAChBT,UAAW,GAEXU,GACAX,WACMF,MAAO,MACPA,MAAO,MAEbc,WACQd,MAAO,MACPe,IAAK,MACLD,UACI,OACAhB,EACAO,EACAJ,EACAQ,EACAC,MAIZM,GACAjB,UAAW,OACXC,MAAOH,EACPoB,QAASpB,EACTqB,UAtEaC,eAAgB,qoEAsF7BC,GACAlB,WAEQF,MAAO,MACPe,IAAK,QAGLf,MAAO,MACPe,IAAK,QAGbD,WAxBAd,MAAO,SACPY,gBAAgB,EAChBS,aAAa,EACbP,UACIE,GAEIhB,MAAO,KACPe,IAAK,KACLO,YAAY,EACZR,UAAWL,MAiBfO,EACAL,IAYR,OATAA,EAAKG,UACDhB,EACAG,EACAI,EACAI,EACAC,EACAG,EACAO,GACFG,OAAOhB,IAELiB,QAAS,KACTV,WAhHAf,UAAW,OACXC,MAAO,MACPe,IAAK,KAgHDd,EACAI,EACAK,EACAG,EACAO,GACFG,OAAOhB,MAYbjB,EAAkBD,GACXA,EACFC,EAAkBF,GAChBA,OADN","file":"../../languages/scheme.js","sourcesContent":["define([], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    define(['../highlight'], function (hljs) {\n        var SCHEME_IDENT_RE = '[^\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}\",\\'`;#|\\\\\\\\\\\\s]+';\n        var SCHEME_SIMPLE_NUMBER_RE = '(\\\\-|\\\\+)?\\\\d+([./]\\\\d+)?';\n        var SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';\n        var BUILTINS = { 'builtin-name': 'case-lambda call/cc class define-class exit-handler field import ' + 'inherit init-field interface let*-values let-values let/ec mixin ' + 'opt-lambda override protect provide public rename require ' + 'require-for-syntax syntax syntax-case syntax-error unit/sig unless ' + 'when with-syntax and begin call-with-current-continuation ' + 'call-with-input-file call-with-output-file case cond define ' + 'define-syntax delay do dynamic-wind else for-each if lambda let let* ' + \"let-syntax letrec letrec-syntax map or syntax-rules ' * + , ,@ - ... / \" + '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan ' + 'boolean? caar cadr call-with-input-file call-with-output-file ' + 'call-with-values car cdddar cddddr cdr ceiling char->integer ' + 'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? ' + 'char-downcase char-lower-case? char-numeric? char-ready? char-upcase ' + 'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? ' + 'char? close-input-port close-output-port complex? cons cos ' + 'current-input-port current-output-port denominator display eof-object? ' + 'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor ' + 'force gcd imag-part inexact->exact inexact? input-port? integer->char ' + 'integer? interaction-environment lcm length list list->string ' + 'list->vector list-ref list-tail list? load log magnitude make-polar ' + 'make-rectangular make-string make-vector max member memq memv min ' + 'modulo negative? newline not null-environment null? number->string ' + 'number? numerator odd? open-input-file open-output-file output-port? ' + 'pair? peek-char port? positive? procedure? quasiquote quote quotient ' + 'rational? rationalize read read-char real-part real? remainder reverse ' + 'round scheme-report-environment set! set-car! set-cdr! sin sqrt string ' + 'string->list string->number string->symbol string-append string-ci<=? ' + 'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy ' + 'string-fill! string-length string-ref string-set! string<=? string<? ' + 'string=? string>=? string>? string? substring symbol->string symbol? ' + 'tan transcript-off transcript-on truncate values vector ' + 'vector->list vector-fill! vector-length vector-ref vector-set! ' + 'with-input-from-file with-output-to-file write write-char zero?' };\n        var SHEBANG = {\n            className: 'meta',\n            begin: '^#!',\n            end: '$'\n        };\n        var LITERAL = {\n            className: 'literal',\n            begin: '(#t|#f|#\\\\\\\\' + SCHEME_IDENT_RE + '|#\\\\\\\\.)'\n        };\n        var NUMBER = {\n            className: 'number',\n            variants: [\n                {\n                    begin: SCHEME_SIMPLE_NUMBER_RE,\n                    relevance: 0\n                },\n                {\n                    begin: SCHEME_COMPLEX_NUMBER_RE,\n                    relevance: 0\n                },\n                { begin: '#b[0-1]+(/[0-1]+)?' },\n                { begin: '#o[0-7]+(/[0-7]+)?' },\n                { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }\n            ]\n        };\n        var STRING = hljs.QUOTE_STRING_MODE;\n        var REGULAR_EXPRESSION = {\n            className: 'regexp',\n            begin: '#[pr]x\"',\n            end: '[^\\\\\\\\]\"'\n        };\n        var COMMENT_MODES = [\n            hljs.COMMENT(';', '$', { relevance: 0 }),\n            hljs.COMMENT('#\\\\|', '\\\\|#')\n        ];\n        var IDENT = {\n            begin: SCHEME_IDENT_RE,\n            relevance: 0\n        };\n        var QUOTED_IDENT = {\n            className: 'symbol',\n            begin: \"'\" + SCHEME_IDENT_RE\n        };\n        var BODY = {\n            endsWithParent: true,\n            relevance: 0\n        };\n        var QUOTED_LIST = {\n            variants: [\n                { begin: /'/ },\n                { begin: '`' }\n            ],\n            contains: [{\n                    begin: '\\\\(',\n                    end: '\\\\)',\n                    contains: [\n                        'self',\n                        LITERAL,\n                        STRING,\n                        NUMBER,\n                        IDENT,\n                        QUOTED_IDENT\n                    ]\n                }]\n        };\n        var NAME = {\n            className: 'name',\n            begin: SCHEME_IDENT_RE,\n            lexemes: SCHEME_IDENT_RE,\n            keywords: BUILTINS\n        };\n        var LAMBDA = {\n            begin: /lambda/,\n            endsWithParent: true,\n            returnBegin: true,\n            contains: [\n                NAME,\n                {\n                    begin: /\\(/,\n                    end: /\\)/,\n                    endsParent: true,\n                    contains: [IDENT]\n                }\n            ]\n        };\n        var LIST = {\n            variants: [\n                {\n                    begin: '\\\\(',\n                    end: '\\\\)'\n                },\n                {\n                    begin: '\\\\[',\n                    end: '\\\\]'\n                }\n            ],\n            contains: [\n                LAMBDA,\n                NAME,\n                BODY\n            ]\n        };\n        BODY.contains = [\n            LITERAL,\n            NUMBER,\n            STRING,\n            IDENT,\n            QUOTED_IDENT,\n            QUOTED_LIST,\n            LIST\n        ].concat(COMMENT_MODES);\n        return {\n            illegal: /\\S/,\n            contains: [\n                SHEBANG,\n                NUMBER,\n                STRING,\n                QUOTED_IDENT,\n                QUOTED_LIST,\n                LIST\n            ].concat(COMMENT_MODES)\n        };\n    });\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}